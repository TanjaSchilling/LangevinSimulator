#------------------------------------------------------------------------------#
# This makefile was generated by 'cbp2make' tool rev.147                       #
#------------------------------------------------------------------------------#

INSTALLDIR = /usr/local/lib
INCLUDEDIR = /usr/local/include/tensor_utils
OUTNAME = libtensor_utils.so
OUTNAME_DEBUG = libtensor_utilsd.so

WORKDIR = `pwd`

CC = gcc
CXX = g++
AR = ar
LD = g++
WINDRES = windres

INC = -Iinclude
CFLAGS = -Wall -std=c++17 -fPIC -fexceptions
RESINC = 
LIBDIR = 
LIB = 
LDFLAGS = -s

INC_DEBUG = $(INC)
CFLAGS_DEBUG = $(CFLAGS) -Og -g -DTHROW_EXCEPTIONS=1 -DENABLE_INTEGRAL_TYPES=0
RESINC_DEBUG = $(RESINC)
RCFLAGS_DEBUG = $(RCFLAGS)
LIBDIR_DEBUG = $(LIBDIR)
LIB_DEBUG = $(LIB)
LDFLAGS_DEBUG = $(LDFLAGS)
OBJDIR_DEBUG = obj/Debug
DEP_DEBUG = 
OUT_DEBUG = lib/Debug/$(OUTNAME_DEBUG)

INC_RELEASE = $(INC)
CFLAGS_RELEASE = $(CFLAGS) -O3 -DENABLE_INTEGRAL_TYPES=0
RESINC_RELEASE = $(RESINC)
RCFLAGS_RELEASE = $(RCFLAGS)
LIBDIR_RELEASE = $(LIBDIR)
LIB_RELEASE = $(LIB)
LDFLAGS_RELEASE = $(LDFLAGS)
OBJDIR_RELEASE = obj/Release
DEP_RELEASE = 
OUT_RELEASE = lib/Release/$(OUTNAME)

OBJ_DEBUG = $(OBJDIR_DEBUG)/src/TensorBase.o $(OBJDIR_DEBUG)/src/TensorDerived.o

OBJ_RELEASE = $(OBJDIR_RELEASE)/src/TensorBase.o $(OBJDIR_RELEASE)/src/TensorDerived.o

all: debug release

clean: clean_debug clean_release

before_debug: 
	test -d lib/Debug || mkdir -p lib/Debug
	test -d $(OBJDIR_DEBUG)/src || mkdir -p $(OBJDIR_DEBUG)/src

after_debug: 

debug: before_debug out_debug after_debug

out_debug: before_debug $(OBJ_DEBUG) $(DEP_DEBUG)
	$(LD) -shared $(LIBDIR_DEBUG) $(OBJ_DEBUG)  -o $(OUT_DEBUG) $(LDFLAGS_DEBUG) $(LIB_DEBUG)

$(OBJDIR_DEBUG)/src/TensorBase.o: src/TensorBase.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c src/TensorBase.cpp -o $(OBJDIR_DEBUG)/src/TensorBase.o

$(OBJDIR_DEBUG)/src/TensorDerived.o: src/TensorDerived.cpp
	$(CXX) $(CFLAGS_DEBUG) $(INC_DEBUG) -c src/TensorDerived.cpp -o $(OBJDIR_DEBUG)/src/TensorDerived.o

clean_debug: 
	rm -f $(OBJ_DEBUG) $(OUT_DEBUG)
	rm -rf lib/Debug
	rm -rf $(OBJDIR_DEBUG)/src

before_release: 
	test -d lib/Release || mkdir -p lib/Release
	test -d $(OBJDIR_RELEASE)/src || mkdir -p $(OBJDIR_RELEASE)/src

after_release: 

release: before_release out_release after_release

out_release: before_release $(OBJ_RELEASE) $(DEP_RELEASE)
	$(LD) -shared $(LIBDIR_RELEASE) $(OBJ_RELEASE)  -o $(OUT_RELEASE) $(LDFLAGS_RELEASE) $(LIB_RELEASE)

$(OBJDIR_RELEASE)/src/TensorBase.o: src/TensorBase.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c src/TensorBase.cpp -o $(OBJDIR_RELEASE)/src/TensorBase.o

$(OBJDIR_RELEASE)/src/TensorDerived.o: src/TensorDerived.cpp
	$(CXX) $(CFLAGS_RELEASE) $(INC_RELEASE) -c src/TensorDerived.cpp -o $(OBJDIR_RELEASE)/src/TensorDerived.o

clean_release: 
	rm -f $(OBJ_RELEASE) $(OUT_RELEASE)
	rm -rf lib/Release
	rm -rf $(OBJDIR_RELEASE)/src

install:
	install -m 555 $(OUT_RELEASE) $(INSTALLDIR)
	install -m 555 $(OUT_DEBUG) $(INSTALLDIR)
	test -d $(INCLUDEDIR) || mkdir -p $(INCLUDEDIR)
	install -m 444 include/*.hpp $(INCLUDEDIR)
	ldconfig

uninstall:
	rm -f $(INSTALLDIR)/$(OUTNAME)
	rm -f $(INSTALLDIR)/$(OUTNAME_DEBUG)
	rm -rf $(INCLUDEDIR)
	ldconfig

.PHONY: before_debug after_debug clean_debug before_release after_release clean_release install uninstall

